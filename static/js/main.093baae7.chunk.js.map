{"version":3,"sources":["logo.svg","components/Navbar/Navbar.js","tourData.js","components/tour/index.js","components/tourlist/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","src","logo","alt","href","tourData","id","city","img","name","info","tour","this","props","removeTour","Component","Tourlist","state","tours","console","log","map","key","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,yQCI5B,SAASC,IACtB,OACE,yBAAKC,UAAU,UACb,yBAAKC,IAAKC,IAAMC,IAAI,YACpB,wBAAIH,UAAU,aACZ,4BACE,uBAAGI,KAAK,IAAIJ,UAAU,YAAtB,SAIF,4BACE,uBAAGI,KAAK,IAAIJ,UAAU,YAAtB,UAIF,4BACE,uBAAGI,KAAK,IAAIJ,UAAU,YAAtB,YAIF,4BACE,uBAAGI,KAAK,IAAIJ,UAAU,mBAAtB,a,UCzBGK,EAAW,CACtB,CACEC,GAAI,EACJC,KAAM,OACNC,IAAK,iBACLC,KAAM,mBACNC,KACE,kJAEJ,CACEJ,GAAI,EACJC,KAAM,QACNC,IAAK,kBACLC,KAAM,oBACNC,KACE,kJAEJ,CACEJ,GAAI,EACJC,KAAM,SACNC,IAAK,mBACLC,KAAM,2BACNC,KACE,kJAEJ,CACEJ,GAAI,EACJC,KAAM,QACNC,IAAK,kBACLC,KAAM,mBACNC,KACE,mJC5BeC,G,6KACT,IAAD,EAC+BC,KAAKC,MAAMF,KAArCJ,GADL,EACCD,GADD,EACKC,MAAMC,EADX,EACWA,IAAKC,EADhB,EACgBA,KAAMC,EADtB,EACsBA,KACNE,KAAKC,MAApBC,WACR,OACE,6BAASd,UAAU,QACjB,yBAAKA,UAAU,iBACb,yBAAKC,IAAKO,EAAKL,IAAI,gBACnB,0BAAMH,UAAU,aACd,uBAAGA,UAAU,0BAGjB,yBAAKA,UAAU,aACb,4BAAKO,GACL,4BAAKE,GACL,mCACO,IACL,8BACE,uBAAGT,UAAU,+BAGjB,2BAAIU,S,GArBoBK,cCEbC,E,4MACnBC,MAAQ,CACNC,MAAOb,G,EAETS,WAAa,SAACR,GACZa,QAAQC,IAAId,I,uDAEJ,IAAD,OACCY,EAAUN,KAAKK,MAAfC,MACR,OACE,6BAASlB,UAAU,YAChBkB,EAAMG,KAAI,SAACV,GAAD,OACT,kBAAC,EAAD,CAAMW,IAAKX,EAAKL,GAAIK,KAAMA,EAAMG,WAAY,EAAKA,qB,GAZrBC,aCCjBQ,E,uKAEjB,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALyBT,aCMbU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.093baae7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f87f97b6.svg\";","import React from \"react\";\r\nimport logo from \"../../logo.svg\";\r\nimport \"./Navbar.scss\";\r\n\r\nexport default function Navbar() {\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <img src={logo} alt=\"my logo\" />\r\n      <ul className=\"nav-links\">\r\n        <li>\r\n          <a href=\"/\" className=\"nav-link\">\r\n            home\r\n          </a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/\" className=\"nav-link\">\r\n            about\r\n          </a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/\" className=\"nav-link\">\r\n            service\r\n          </a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/\" className=\"nav-link active\">\r\n            images\r\n          </a>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n","export const tourData = [\n  {\n    id: 1,\n    city: \"DOME\",\n    img: \"./img/dome.jpg\",\n    name: \"dome bridge tour\",\n    info:\n      \"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Tenetur, nam omnis error corrupti eum assumenda enim odit architecto corporis. Sequi\",\n  },\n  {\n    id: 2,\n    city: \"AFLAO\",\n    img: \"./img/aflao.jpg\",\n    name: \"aflao lights tour\",\n    info:\n      \"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Tenetur, nam omnis error corrupti eum assumenda enim odit architecto corporis. Sequi\",\n  },\n  {\n    id: 3,\n    city: \"AKATSI\",\n    img: \"./img/akatsi.jpg\",\n    name: \"akatsi royal palace tour\",\n    info:\n      \"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Tenetur, nam omnis error corrupti eum assumenda enim odit architecto corporis. Sequi\",\n  },\n  {\n    id: 4,\n    city: \"HOHOE\",\n    img: \"./img/hohoe.jpg\",\n    name: \"hohoe sushi tour\",\n    info:\n      \"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Tenetur, nam omnis error corrupti eum assumenda enim odit architecto corporis. Sequi\",\n  },\n];\n","import React, { Component } from \"react\";\r\nimport \"./tour.scss\";\r\n\r\nexport default class tour extends Component {\r\n  render() {\r\n    const { id, city, img, name, info } = this.props.tour;\r\n    const { removeTour } = this.props;\r\n    return (\r\n      <article className=\"tour\">\r\n        <div className=\"img-container\">\r\n          <img src={img} alt=\"city images\" />\r\n          <span className=\"close-btn\">\r\n            <i className=\"fas fa-window-close\" />\r\n          </span>\r\n        </div>\r\n        <div className=\"tour-info\">\r\n          <h2>{city}</h2>\r\n          <h4>{name}</h4>\r\n          <h5>\r\n            info{\".\"}\r\n            <span>\r\n              <i className=\"fas fa-caret-square-down\" />\r\n            </span>\r\n          </h5>\r\n          <p>{info}</p>\r\n        </div>\r\n      </article>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./tourlist.scss\";\r\nimport { tourData } from \"../../tourData\";\r\nimport Tour from \"../tour\";\r\n\r\nexport default class Tourlist extends Component {\r\n  state = {\r\n    tours: tourData,\r\n  };\r\n  removeTour = (id) => {\r\n    console.log(id);\r\n  };\r\n  render() {\r\n    const { tours } = this.state;\r\n    return (\r\n      <section className=\"tourlist\">\r\n        {tours.map((tour) => (\r\n          <Tour key={tour.id} tour={tour} removeTour={this.removeTour} />\r\n        ))}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Tourlist from \"./components/tourlist\";\n// import Tour from \"./components/tour\"\n\nexport default class App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar />\n        <Tourlist />\n      </React.Fragment>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}